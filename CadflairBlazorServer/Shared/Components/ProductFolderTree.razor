@attribute [Authorize]
@inject AuthenticationStateProvider _authenticationStateProvider
@inject DataServicesManager _dataServicesManager
@inject IDialogService _dialogService
@inject ISnackbar _snackbar


<MudPaper Class="pa-3">
    <MudStack>
        <MudText Typo="Typo.h6">Manage Product Families</MudText>
        <MudButton OnClick="NewProductFolder_OnClick" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.CreateNewFolder">New Folder</MudButton>
        <MudIconButton OnClick="DeleteProductFolder_OnClick" Icon="@Icons.Material.Filled.Delete"></MudIconButton>
        <MudPaper Elevation="0">
            <MudTreeView T="ProductFolderTreeItem"
                         Items="_productFolderTreeItems"
                         SelectedValueChanged="SelectedTreeItemChanged"
                         Hover="true"
                         ExpandOnDoubleClick="true">
                <ItemTemplate>
                    <MudTreeViewItem Value="@context"
                                     Items="@context.ChildItems"
                                     Text="@context.ProductFolder.DisplayName"
                                     EndText="@(context.ChildItems.Count() == 0 ? null : context.ChildItems.Count().ToString())"
                                     Icon="@Icons.Custom.Uncategorized.Folder" />
                </ItemTemplate>
            </MudTreeView>
        </MudPaper>
    </MudStack>
</MudPaper>



@code {

    /// <summary>
    /// Returns the folder that was last selected.
    /// </summary>
    [Parameter]
    public ProductFolder? SelectedFolder
    {
        get => _selectedFolder;
        set
        {
            if (_selectedFolder?.Id == value?.Id) return;
            _selectedFolder = value;
            SelectedFolderChanged.InvokeAsync(value);
        }
    }

    /// <summary>
    /// Callback that is called when a folder selected.
    /// </summary>
    [Parameter] public EventCallback<ProductFolder> SelectedFolderChanged { get; set; }

    private User _loggedInUser = new();

    private class ProductFolderTreeItem
    {
        public ProductFolder ProductFolder { get; set; } = new();
        public HashSet<ProductFolderTreeItem> ChildItems { get; set; } = new();
    }

    private HashSet<ProductFolderTreeItem> _productFolderTreeItems { get; set; } = new();
    private ProductFolder? _selectedFolder;

    protected override async Task OnInitializedAsync()
    {
        _loggedInUser = await _authenticationStateProvider.GetUser(_dataServicesManager.UserService);
        if (_loggedInUser.SubscriptionId == null) return;

        // load the root level product folders
        await LoadProductFoldersRecursive(null, _productFolderTreeItems);
    }

    private async Task LoadProductFoldersRecursive(int? parentId, HashSet<ProductFolderTreeItem> treeItems)
    {
        List<ProductFolder> folders = await _dataServicesManager.ProductService.GetProductFoldersBySubscriptionIdAndParentId((int)_loggedInUser.SubscriptionId!, parentId);

        foreach (ProductFolder folder in folders)
        {
            var treeItem = new ProductFolderTreeItem() { ProductFolder = folder };
            treeItems.Add(treeItem);
            await LoadProductFoldersRecursive(folder.Id, treeItem.ChildItems);
        }
    }

    private void SelectedTreeItemChanged(ProductFolderTreeItem? selectedItem)
    {
        SelectedFolder = selectedItem?.ProductFolder;
    }

    private async Task NewProductFolder_OnClick()
    {
        DialogParameters parameters = new();
        parameters.Add("ParentId", _selectedFolder == null ? null : _selectedFolder.Id);
        parameters.Add("UserId", _loggedInUser.Id);
        parameters.Add("SubscriptionId", _loggedInUser.SubscriptionId);
        var result = await _dialogService.Show<ProductFolderDialog>("New Folder", parameters).Result;

        if (!result.Cancelled)
        {
            _productFolderTreeItems = new();
            await LoadProductFoldersRecursive(null, _productFolderTreeItems);
        }
    }

    private async Task DeleteProductFolder_OnClick()
    {
        if (_selectedFolder == null) return;

        bool? result = await _dialogService.ShowMessageBox(title: "Delete Folder",
                                                           message: "Are you sure you want to delete this folder?",
                                                           yesText: "Yes",
                                                           cancelText: "Cancel");

        if (result == true)
        {
            await _dataServicesManager.ProductService.DeleteProductFolder(_selectedFolder);
            _snackbar.Add("Successfully deleted folder.", Severity.Success);

            // refresh data
            _selectedFolder = null;
            _productFolderTreeItems = new();
            await LoadProductFoldersRecursive(null, _productFolderTreeItems);
        }
    }

}
