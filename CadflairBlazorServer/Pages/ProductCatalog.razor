@page "/{CompanyName}/products/{ProductName}"

@layout ConfiguratorLayout
@inject IJSRuntime _js
@inject DataServicesManager _dataServicesManager
@inject ForgeServicesManager _forgeServicesManager

<MudDrawer @bind-Open="@_drawerOpen"
           Variant="@DrawerVariant.Persistent"
           ClipMode="DrawerClipMode.Always"
           Anchor="Anchor.Left"
           Width="30%">
    <MudDrawerHeader>
        <MudText Typo="Typo.h5"><b>@_product?.DisplayName</b></MudText>
    </MudDrawerHeader>
    <MudStack Class="flex-grow-1 overflow-auto" Spacing="0">
        <!--Product Inputs-->
        @if (_iLogicFormData.Items == null)
        {
            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class="flex-grow-1">
                <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Large" />
            </MudStack>
        }
        else
        {
            <MudForm @bind-IsValid="_validInputs" Class="flex-grow-1 overflow-auto">
                <MudStack Class="flex-grow-1 px-3 overflow-auto">
                    @foreach (ILogicFormElement element in _iLogicFormData.Items)
                    {
                        <ProductInput Element="@element" @key="element"></ProductInput>
                    }
                </MudStack>
            </MudForm>
        }
        <!--Action Buttons-->
        <MudStack Class="pa-3">
            <MudButton OnClick="PrintInputValues" Disabled="@(!_validInputs)" Variant="@_buttonVariant" Color="Color.Primary" FullWidth="true">Submit</MudButton>
            <MudButton Variant="@_buttonVariant" Color="Color.Primary" FullWidth="true">Download Pdf</MudButton>
            <MudButton Variant="@_buttonVariant" Color="Color.Primary" FullWidth="true">Download Step</MudButton>
        </MudStack>
    </MudStack>
</MudDrawer>

<!--Collapse Button-->
<MudStack Class="d-flex flex-row absolute z-10 ma-1">
    <MudToggleIconButton @bind-Toggled="@_drawerOpen"
                         Variant="Variant.Filled"
                         Style="border-radius:50%"
                         Icon="@Icons.Filled.ChevronRight" Color="@Color.Primary" Size="Size.Large"
                         ToggledIcon="@Icons.Filled.ChevronLeft" ToggledColor="@Color.Primary" ToggledSize="Size.Large" />

</MudStack>

<!--Forge Viewer-->
<div class="d-flex ma-0 pa-0" style="height: calc(100vh - var(--mud-appbar-height))">
    <ForgeViewer @ref="_forgeViewer"/>
</div>


@code
{
    [Parameter] public string ProductName { get; set; } = string.Empty;
    [Parameter] public string CompanyName { get; set; } = string.Empty;

    private Subscription _subscription = new();
    private Product _product = new();
    private ProductVersion _productVersion = new();
    private ProductConfiguration _defaultConfiguration = new();
    private ILogicFormElement _iLogicFormData = new();
    private bool _validInputs;

    private ForgeViewer? _forgeViewer;
    private Variant _buttonVariant = Variant.Outlined;
    private bool _drawerOpen = true;

    protected override async void OnInitialized()
    {
        // get data
        _subscription = await _dataServicesManager.SubscriptionService.GetSubscriptionBySubdirectoryName(CompanyName);
        _product = await _dataServicesManager.ProductService.GetProductBySubscriptionIdAndSubdirectoryName(_subscription.Id, ProductName);
        _productVersion = await _dataServicesManager.ProductService.GetLatestProductVersionByProductId(_product.Id);
        _defaultConfiguration = await _dataServicesManager.ProductService.GetDefaultProductConfigurationByProductVersionId(_productVersion.Id);

        Debug.WriteLine(_productVersion.ILogicFormJson);
        Debug.WriteLine($"Found product: {_product.DisplayName}, Version: { _productVersion.VersionNumber}");

        // construct UI
        _iLogicFormData = JsonConvert.DeserializeObject<ILogicFormElement>(_productVersion.ILogicFormJson)!;
        _iLogicFormData.SetParameterExpressions(_defaultConfiguration.ArgumentJson);

        Debug.WriteLine("Parameter values set");

        await _forgeViewer!.ViewDocument(_product.ForgeBucketKey.ToString(), _defaultConfiguration.ForgeZipKey.ToString());

    }

    //private async Task CreateBucket()
    //{
    //    await _objectStorageService.CreateBucketAsync(Guid.NewGuid().ToString());
    //}

    private async Task PrintInputValues()
    {
        Debug.WriteLine(_iLogicFormData.GetArgumentJson());

        //var values = GetInputValues(_iLogicFormData.Items);

        //foreach(var val in values)
        //{
        //    Debug.WriteLine($"{val.Key}: {val.Value}");
        //}

        //string jsonValues = JsonSerializer.Serialize(values);


        //submit the request to design automation. I just want to make the model and convert it to svf here. Do not produce any inputs yet
        //await _forgeServicesManager.DesignAutomationService.GenerateProductConfiguration("cadflair.dresserbasemodel", "Dresser.zip", "Dresser Configurator.ipt", _iLogicFormData.ParameterValues().ToJson());

        //need to remember to create the output bucket before submitting the request. The workitem will fail if the output bucket does not exist

        //somehow get the callback when the workitem is done, then create a new row in the database table so this can be looked up later

        //show buttons for generating outputs if the user likes what they see (pdf, dwg, dwf, stp)
    }

}
