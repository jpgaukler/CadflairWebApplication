<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
        xmlns:local="clr-namespace:CadflairInventorAddin.Commands.Upload"
        x:Class="CadflairInventorAddin.Commands.Upload.UploadWpfWindow"
        mc:Ignorable="d" Width="407" Height="911" Loaded="Window_Loaded">

    <Window.Resources>

        <!--#region Inventor Colors-->
        <Color x:Key="ApplicationFrameBackgroundColor">#222933</Color>
        <Color x:Key="BrowserPaneColor">#3b4453</Color>
        <Color x:Key="BrowserPaneAccentColor">#4b5463</Color>
        <Color x:Key="BrowserPaneTextColor">#f5f5f5</Color>
        <Color x:Key="InputBackgroundColor">#2c3340</Color>
        <Color x:Key="ButtonBorderColor">#8691a1</Color>
        <!--#endregion-->

        <!--#region Window-->
        <SolidColorBrush x:Key="Window.Background" Color="{StaticResource BrowserPaneColor}"/>

        <Style TargetType="Window">
            <Setter Property="Background" Value="{StaticResource Window.Background}"/>
        </Style>
        <!--#endregion-->

        <!--#region TextBox-->
        <SolidColorBrush x:Key="TextBox.Background" Color="{StaticResource InputBackgroundColor}"/>
        <SolidColorBrush x:Key="TextBox.Foreground" Color="{StaticResource BrowserPaneTextColor}"/>
        <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/>
        <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5"/>

        <Style TargetType="TextBox">
            <Setter Property="Background" Value="{StaticResource TextBox.Background}"/>
            <Setter Property="Foreground" Value="{StaticResource TextBox.Foreground}"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Padding" Value="3"/>
        </Style>

        <ControlTemplate x:Key="TextBoxTemplate1" TargetType="{x:Type TextBoxBase}">
            <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
                </Trigger>
                <Trigger Property="IsKeyboardFocused" Value="true">
                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <!--#endregion-->

        <!--#region Label-->
        <SolidColorBrush x:Key="Label.Foreground" Color="{StaticResource BrowserPaneTextColor}"/>
        <SolidColorBrush x:Key="Label.Header.Background" Color="{StaticResource BrowserPaneAccentColor}"/>

        <Style TargetType="Label">
            <Setter Property="Foreground" Value="{StaticResource Label.Foreground}"/>
        </Style>

        <Style TargetType="Label" x:Key="HeaderLabel">
            <Setter Property="Foreground" Value="{StaticResource Label.Foreground}"/>
            <Setter Property="Background" Value="{StaticResource Label.Header.Background}"/>
        </Style>
        <!--#endregion-->

        <!--#region Checkbox-->
        <SolidColorBrush x:Key="OptionMark.Background" Color="#d1deee"/>
        <SolidColorBrush x:Key="OptionMark.Foreground" Color="{StaticResource BrowserPaneTextColor}"/>

        <Style TargetType="CheckBox">
            <Setter Property="Background" Value="{StaticResource OptionMark.Background}"/>
            <Setter Property="Foreground" Value="{StaticResource OptionMark.Foreground}"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Style.Resources>
                <Style TargetType="{x:Type Border}">
                    <Setter Property="CornerRadius" Value="1"/>
                </Style>
            </Style.Resources>

        </Style>

        <Style x:Key="OptionMarkFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="14,0,0,0" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="#FF212121"/>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="#FFF3F9FF"/>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="#FF5593FF"/>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="#FF212121"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="#FFD9ECFF"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="#FF3C77DD"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="#FF212121"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="#FFE6E6E6"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#FFBCBCBC"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070"/>
        <ControlTemplate x:Key="CheckBoxTemplate1" TargetType="{x:Type CheckBox}">
            <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Border x:Name="checkBoxBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                    <Grid x:Name="markGrid">
                        <Path x:Name="optionMark" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " Fill="{StaticResource OptionMark.Static.Glyph}" Margin="1" Opacity="0" Stretch="None"/>
                        <Rectangle x:Name="indeterminateMark" Fill="{StaticResource OptionMark.Static.Glyph}" Margin="2" Opacity="0"/>
                    </Grid>
                </Border>
                <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="HasContent" Value="true">
                    <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                    <Setter Property="Padding" Value="4,-1,0,0"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Background}"/>
                    <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Border}"/>
                    <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
                    <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Background}"/>
                    <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Border}"/>
                    <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
                    <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="true">
                    <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Background}"/>
                    <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Border}"/>
                    <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
                    <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="true">
                    <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                    <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="{x:Null}">
                    <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                    <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <!--#endregion-->

        <!--#region TreeView-->
        <SolidColorBrush x:Key="TreeView.Background" Color="{StaticResource InputBackgroundColor}"/>
        <SolidColorBrush x:Key="TreeView.Foreground" Color="{StaticResource BrowserPaneTextColor}"/>

        <Style TargetType="TreeView">
            <Setter Property="Background" Value="{StaticResource TreeView.Background}"/>
            <Setter Property="Foreground" Value="{StaticResource TreeView.Foreground}"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
        </Style>

        <Style TargetType="TreeViewItem">
            <Setter Property="Foreground" Value="{StaticResource TreeView.Foreground}"/>
        </Style>

        <ControlTemplate x:Key="TreeViewTemplate1" TargetType="{x:Type TreeView}">
            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                <ScrollViewer x:Name="_tv_scrollviewer_" Background="{TemplateBinding Background}" CanContentScroll="false" Focusable="false" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                    <ItemsPresenter/>
                </ScrollViewer>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                </Trigger>
                <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                    <Setter Property="CanContentScroll" TargetName="_tv_scrollviewer_" Value="true"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>


        <!--#endregion-->

        <!--#region Combobox-->
        <!--<Style TargetType="ComboBox" x:Key="CustomComboBox">
            <Setter Property="Background" Value="{StaticResource DarkAccentBrush}"/>
            <Setter Property="Foreground" Value="{StaticResource BrowserPaneTextBrush}"/>
        </Style>-->
        <!--#endregion-->

        <!--#region Button-->
        <SolidColorBrush x:Key="Button.Background" Color="Transparent"/>
        <SolidColorBrush x:Key="Button.Foreground" Color="{StaticResource BrowserPaneTextColor}"/>
        <SolidColorBrush x:Key="Button.Border" Color="{StaticResource ButtonBorderColor}"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="Transparent"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>

        <Style TargetType="Button">
            <Setter Property="Background" Value="{StaticResource Button.Background}"/>
            <Setter Property="Foreground" Value="{StaticResource Button.Foreground}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Border}"/>
            <Style.Resources>
                <Style TargetType="{x:Type Border}">
                    <Setter Property="CornerRadius" Value="1"/>
                </Style>
            </Style.Resources>
        </Style>

        <ControlTemplate x:Key="ButtonTemplate1" TargetType="{x:Type ButtonBase}">
            <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="Button.IsDefaulted" Value="true">
                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="true">
                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <!--#endregion-->

    </Window.Resources>

    <DockPanel>

        <!-- OK/Cancel buttons-->
        <StackPanel Orientation="Horizontal" 
                    Margin="5,5"
                    DockPanel.Dock="Bottom">
            <Button Template="{DynamicResource ButtonTemplate1}" 
                    x:Name="CreateProductButton"
                    Click="CreateProductButton_Click"
                    Margin="0,0,5,0"
                    MinWidth="100"
                    Content="OK" />
            <Button Template="{DynamicResource ButtonTemplate1}" 
                    Content="Cancel"
                    MinWidth="100"/>
        </StackPanel>

        <!-- Response -->
        <StackPanel DockPanel.Dock="Top">
            <Label Content="Response" Style="{StaticResource HeaderLabel}"/>
            <StackPanel Margin="10,7">
                <RichTextBox x:Name="ConnectionRichTextBox" Height="200"/>
            </StackPanel>
        </StackPanel>

        <!-- Product Information -->
        <StackPanel DockPanel.Dock="Top">
            <Label Content="Product Information" Style="{StaticResource HeaderLabel}"/>
            <StackPanel Margin="10,7">
                <!--<DockPanel>
                    <Label Content="Company Name" MinWidth="150"/>
                    <TextBox Template="{DynamicResource TextBoxTemplate1}" 
                             x:Name="CompanyNameTextBox" IsEnabled="false" Margin="0,5" d:Text="Sample text"/>
                </DockPanel>-->
                <DockPanel>
                    <Label Content="Product Name" MinWidth="150"/>
                    <TextBox x:Name="DisplayNameTextBox" Margin="0,5" d:Text="Sample text"/>
                </DockPanel>
                <DockPanel>
                    <Label Content="Folder Name" MinWidth="150"/>
                    <TextBox x:Name="ProductFolderTextBox" Margin="0,5" d:Text="Sample text"/>
                </DockPanel>
                <DockPanel>
                    <Label Content="Folder" MinWidth="150" DockPanel.Dock="Left"/>
                    <Button Template="{DynamicResource ButtonTemplate1}" 
                            x:Name="CreateProductFolderButton"
                            Click="CreateProductFolderButton_Click"
                            Content="New Folder" />
                </DockPanel>
                <TreeView Template="{DynamicResource TreeViewTemplate1}" 
                          x:Name="ProductFolderTreeView"
                          Height="100">
                    <d:TreeViewItem Header="Products">
                        <d:TreeViewItem Header="Dresser">
                            <d:TreeViewItem Header="Hemnes"/>
                        </d:TreeViewItem>
                        <d:TreeViewItem Header="Tables"/>
                        <d:TreeViewItem Header="Cabinets"/>
                    </d:TreeViewItem>
                </TreeView>
            </StackPanel>
        </StackPanel>

        <!-- Options -->
        <StackPanel DockPanel.Dock="Top">
            <Label Content="Options" Style="{StaticResource HeaderLabel}"/>
            <StackPanel Margin="10,7">
                <CheckBox Template="{DynamicResource CheckBoxTemplate1}" 
                          x:Name="IsPublicCheckBox" Content="Make Model Public" IsChecked="true" Margin="5,5"/>
                <CheckBox x:Name="AllowProductConfigurationCheckBox" Content="Allow Product Configuration" IsChecked="false" Margin="5,5"/>
                <!--<CheckBox Content="Disabled" IsEnabled="false" IsChecked="false" Margin="5,5"/>-->
                <!--<CheckBox Content="Disabled Checked" IsEnabled="false" IsChecked="true" Margin="5,5"/>-->

                <DockPanel>
                    <Label Content="iLogic Form:" MinWidth="150"/>
                    <ComboBox x:Name="ILogicFormsComboBox" 
                              SelectionChanged="ILogicFormsComboBox_SelectionChanged"
                              ToolTip="Select the iLogic form that controls the product configuration.">
                    </ComboBox>
                </DockPanel>
            </StackPanel>
        </StackPanel>

        <!-- Parameters grid -->
        <DataGrid x:Name="ParametersDataGrid" 
                  AutoGenerateColumns="False" 
                  Margin="10,5">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Display Name" Binding="{Binding Name}"/>
                <DataGridTextColumn Header="Parameter Name" Binding="{Binding ParameterName}"/>
                <DataGridTextColumn Header="Units" Binding="{Binding ParameterUnits}"/>
                <DataGridTextColumn Header="Default Value" Binding="{Binding ParameterExpression}"/>
                <DataGridTextColumn Header="Element Spec" Binding="{Binding UiElementSpec}"/>
                <DataGridTextColumn Header="Control Type" Binding="{Binding EditControlType}"/>
            </DataGrid.Columns>
        </DataGrid>

    </DockPanel>
</Window>
