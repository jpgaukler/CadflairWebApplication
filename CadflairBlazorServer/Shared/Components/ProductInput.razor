
@switch (Element.UiElementSpec)
{
    case "ControlTabGroupSpec":

    @*        //add header for tab group
    <MudText Typo="Typo.h6">@Element.Name</MudText>

    //add caption image if it exists
    if(!string.IsNullOrWhiteSpace(Element.Base64Image))
    {
    <MudImage Src="@($"data:image/bmp;base64,{Element.Base64Image}")" Alt="@Element.Name"></MudImage>
    }

    //open div to contain items
    <MudTabs>
    <MudTabPanel Text="Tab One">
    <MudText>Content One</MudText>
    </MudTabPanel>
    <MudTabPanel Text="Tab Two">
    <MudText>Content Two</MudText>
    </MudTabPanel>
    <MudTabPanel Text="Tab Three">
    <MudText>Content Three</MudText>
    </MudTabPanel>
    <MudTabPanel Text="Tab Disabled" Disabled="true">
    <MudText>Content Disabled</MudText>
    </MudTabPanel>
    </MudTabs>
    foreach (ILogicUiElement subItem in Element.Items)
    {
    <ProductInput Item="@subItem" @key="subItem"></ProductInput>
    }

    break;
    *@

    case "ControlGroupSpec":
        <MudExpansionPanels>
            <MudExpansionPanel Text="@Element.Name">
                @foreach (ILogicUiElement element in Element.Items)
                {
                    <ProductInput Element="@element" @key="element"></ProductInput>
                }
            </MudExpansionPanel>
        </MudExpansionPanels>

        break;

    case "NumericParameterControlSpec":
        switch (Element.EditControlType)
        {
            case "TextBox":
                <MudTooltip Duration="500" Text="@Element.ToolTip">
                    <MudNumericField Label="@Element.Name"
                     T="double"
                     Adornment="Adornment.End"
                     AdornmentText="@Element.ParameterUnits"
                     Validation="@(new RangeAttribute(minimum: Element.ParameterMinValue == null ? 0 : (double)Element.ParameterMinValue,
                                                                      maximum: Element.ParameterMaxValue == null ? 0 : (double)Element.ParameterMaxValue)
                                                       { ErrorMessage = $"Please enter a value between {Element.ParameterMinValue} and {Element.ParameterMaxValue}." })" />
                </MudTooltip>

                break;

            case "TrackBar":
                <MudTooltip Duration="500" Text="@Element.ToolTip">
                    <MudSlider T="double"
               Min="@(Element.ParameterMinValue == null ? 0 : (double)Element.ParameterMinValue)"
               Max="@(Element.ParameterMaxValue == null ? 0 : (double)Element.ParameterMaxValue)"
               ValueLabel="true">@Element.Name</MudSlider>
                </MudTooltip>
                break;

        }
        break;

    case "TextParameterControlSpec":
        <MudTooltip Duration="500" Text="@Element.ToolTip">
            <MudTextField Label="@Element.Name"
                  Value="@Element.ParameterExpression" />
        </MudTooltip>
        break;

    case "MultiValueNumericParameterControlSpec":
    case "MultiValueTextParameterControlSpec":
        switch (Element.EditControlType)
        {
            case "RadioGroup":
                <MudTooltip Duration="500" Text="@Element.ToolTip">
                    <MudText>@Element.Name</MudText>
                    <MudRadioGroup T="string">
                        @foreach (string expression in Element.ParameterExpressionList)
                        {
                            <MudRadio Option="expression" Color="Color.Primary">@expression</MudRadio>
                        }
                    </MudRadioGroup>
                </MudTooltip>
                break;

            case "ComboBox":
                <MudTooltip Duration="500" Text="@Element.ToolTip">
                    <MudSelect T="string" Label="@Element.Name" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        @foreach (string expression in Element.ParameterExpressionList)
                        {
                            <MudSelectItem Value="expression" />
                        }
                    </MudSelect>
                </MudTooltip>
                break;

            case "ListBox":
                <MudList Clickable="true" Color="Color.Secondary" Dense="true">
                    <MudListSubheader>@Element.Name</MudListSubheader>
                    @foreach (string expression in Element.ParameterExpressionList)
                    {
                        <MudListItem Text="@expression" />
                    }
                </MudList>
                break;
        }
        break;

    case "BooleanParameterControlSpec":
        switch (Element.EditControlType)
        {
            case "CheckBox":
                <MudCheckBox T="bool" Label="@Element.Name" LabelPosition="LabelPosition.Start" />
                break;

            case "TrueOrFalse":
                <MudSelect T="string" Label="@Element.Name">
                    <MudSelectItem Value="@("True")" />
                    <MudSelectItem Value="@("False")" />
                </MudSelect>
                break;
        }
        break;

    case "LabelSpec":
        <MudText>@Element.Name</MudText>
        break;

    case "SplitterSpec":
        break;

    case "PictureControlSpec":
        break;

    case "TextPropertyControlSpec": //this is an iProperty
    case "iLogicRuleControlSpec": //this is an iLogic Rule
    default:
        break;

}

@code {

    [Parameter]
    public ILogicUiElement Element { get; set; } = new();

}
