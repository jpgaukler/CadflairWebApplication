@using Microsoft.AspNetCore.SignalR.Client
@page "/{CompanyName}/products/{ProductName}"
@layout ConfiguratorLayout
@inject DataServicesManager _dataServicesManager
@inject ForgeServicesManager _forgeServicesManager
@inject NavigationManager _navigationManager
@inject IDialogService _dialogService
@inject ISnackbar _snackbar
@inject IJSRuntime _js
@implements IAsyncDisposable

<MudDrawer @bind-Open="@_drawerOpen"
           Variant="@DrawerVariant.Persistent"
           ClipMode="DrawerClipMode.Always"
           Anchor="Anchor.Left"
           Width="30%">
    <MudDrawerHeader>
        <MudText Typo="Typo.h5"><b>@_product?.DisplayName</b></MudText>
    </MudDrawerHeader>
    <MudStack Class="flex-grow-1 overflow-auto" Spacing="0">
        <!--Product Inputs-->
        @if (_iLogicFormData.Items == null)
        {
            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class="flex-grow-1">
                <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Large" />
            </MudStack>
        }
        else
        {
            <MudForm @bind-IsValid="_validInputs" Class="flex-grow-1 overflow-auto">
                <MudStack Class="flex-grow-1 px-3 overflow-auto">
                    @foreach (ILogicFormElement element in _iLogicFormData.Items)
                    {
                        <ProductInput Element="@element" @key="element"></ProductInput>
                    }
                </MudStack>
            </MudForm>
        }
        <!--Action Buttons-->
        <MudStack Class="pa-3">
            <MudButton OnClick="Submit_OnClick" Disabled="@(!_validInputs || _configurationInProgress)" Variant="@_buttonVariant" Color="Color.Primary" FullWidth="true">Submit</MudButton>
            <MudButton OnClick="RequestQuote_OnClick" Disabled="_productConfiguration == null" Variant="@_buttonVariant" Color="Color.Primary" FullWidth="true">Request A Quote</MudButton>
            <MudButton OnClick="DownloadZip_OnClick" Disabled="_productConfiguration?.ForgeZipKey == null" Variant="@_buttonVariant" Color="Color.Primary" FullWidth="true">Download Zip</MudButton>
            <MudButton OnClick="DownloadStp_OnClick" Disabled="_productConfiguration?.ForgeStpKey == null" Variant="@_buttonVariant" Color="Color.Primary" FullWidth="true">Download Step</MudButton>
        </MudStack>
    </MudStack>
</MudDrawer>

<!--Collapse Button-->
<MudStack Class="d-flex flex-row absolute z-10 ma-1">
    <MudToggleIconButton @bind-Toggled="@_drawerOpen"
                         Variant="Variant.Filled"
                         Style="border-radius:50%"
                         Icon="@Icons.Filled.ChevronRight" Color="@Color.Primary" Size="Size.Large"
                         ToggledIcon="@Icons.Filled.ChevronLeft" ToggledColor="@Color.Primary" ToggledSize="Size.Large" />

</MudStack>

<!--Forge Viewer-->
<div class="d-flex ma-0 pa-0" style="height: calc(100vh - var(--mud-appbar-height))">
    <ForgeViewer @ref="_forgeViewer"/>
</div>


@code
{
    [Parameter] public string ProductName { get; set; } = string.Empty;
    [Parameter] public string CompanyName { get; set; } = string.Empty;

    private Subscription _subscription = new();
    private Product _product = new();
    private ProductVersion _productVersion = new();
    private ProductConfiguration _defaultConfiguration = new();
    private ProductConfiguration? _productConfiguration;
    private ILogicFormElement _iLogicFormData = new();
    private bool _validInputs;
    private bool _configurationInProgress = false;

    private ForgeViewer? _forgeViewer;
    private Variant _buttonVariant = Variant.Outlined;
    private bool _drawerOpen = true;

    private HubConnection? _hubConnection;

    protected override async void OnInitialized()
    {
        // setup signal R hub connection
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri("/forgecallbackhub"))
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<string>("CreateProductConfigurationModel_OnProgress", (message) =>
        {
            _snackbar.Add(message, Severity.Info);
        });

        _hubConnection.On<int>("CreateProductConfigurationModel_OnComplete", async (productConfigurationId) =>
        {
            _snackbar.Add("Generating preview...", Severity.Info);
            _productConfiguration = await _dataServicesManager.ProductService.GetProductConfigurationById(productConfigurationId);
        });

        _hubConnection.On<string>("ModelDerivativeTranslation_OnComplete", (urn) =>
        {
            _configurationInProgress = false;
            _snackbar.Add("Configuration generated successfully!", Severity.Info);
            //await _forgeViewer!.ViewDocument(urn);
            //StateHasChanged();
            InvokeAsync(() => _forgeViewer!.ViewDocument(urn));
            InvokeAsync(StateHasChanged);
        });

        // get data
        _subscription = await _dataServicesManager.SubscriptionService.GetSubscriptionBySubdirectoryName(CompanyName);
        _product = await _dataServicesManager.ProductService.GetProductBySubscriptionIdAndSubdirectoryName(_subscription.Id, ProductName);
        _productVersion = await _dataServicesManager.ProductService.GetLatestProductVersionByProductId(_product.Id);
        _defaultConfiguration = await _dataServicesManager.ProductService.GetDefaultProductConfigurationByProductVersionId(_productVersion.Id);

        // construct UI
        _iLogicFormData = JsonConvert.DeserializeObject<ILogicFormElement>(_productVersion.ILogicFormJson)!;
        _iLogicFormData.SetParameterExpressions(_defaultConfiguration.ArgumentJson);

        await _forgeViewer!.ViewDocument(_product.ForgeBucketKey, _defaultConfiguration.ForgeZipKey);

        StateHasChanged();
    }

    private async Task Submit_OnClick()
    {
        if (_configurationInProgress) return;
        _configurationInProgress = true;

        if (_hubConnection?.State != HubConnectionState.Connected) await _hubConnection?.StartAsync()!;

        //Debug.WriteLine(_iLogicFormData.GetArgumentJson());
        _snackbar.Add("Generating new configuration", Severity.Info);

        // Create record in database
        ProductConfiguration newConfiguration = await _dataServicesManager.ProductService.CreateProductConfiguration(productVersionId: _productVersion.Id,
                                                                                                                     argumentJson: _iLogicFormData.GetArgumentJson(),
                                                                                                                     forgeZipKey: null,
                                                                                                                     isDefault: false);

        //submit the request to design automation 
        await _forgeServicesManager.DesignAutomationService.CreateProductConfigurationModel(connectionId: _hubConnection?.ConnectionId!,
                                                                                            productConfigurationId: newConfiguration.Id,
                                                                                            inputBucketKey: _product.ForgeBucketKey,
                                                                                            inputObjectKey: _defaultConfiguration.ForgeZipKey,
                                                                                            inputPathInZip: _productVersion.RootFileName,
                                                                                            inventorParamsJson: _iLogicFormData.GetArgumentJson());
    }

    private async Task RequestQuote_OnClick()
    {
        if (_productConfiguration == null) return;

        DialogParameters parameters = new();
        parameters.Add("ProductConfigurationId", _productConfiguration.Id);
        var result = await _dialogService.Show<ProductQuoteRequestDialog>("Request A Quote", parameters).Result;

        //if (!result.Cancelled)
        //{
        //}
    }


    private async Task DownloadStp_OnClick()
    {
        if (_productConfiguration?.ForgeStpKey == null) return;
        string url = await _forgeServicesManager.ObjectStorageService.GetSignedDownloadUrl(_product.ForgeBucketKey, _productConfiguration.ForgeStpKey);
        _navigationManager.NavigateTo(url);
    }

    private async Task DownloadZip_OnClick()
    {
        if (_productConfiguration?.ForgeZipKey == null) return;
        string url = await _forgeServicesManager.ObjectStorageService.GetSignedDownloadUrl(_product.ForgeBucketKey, _productConfiguration.ForgeZipKey);
        _navigationManager.NavigateTo(url);
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null) await _hubConnection.DisposeAsync();
    }

}
