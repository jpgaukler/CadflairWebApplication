@page "/catalog/mcmaster-catalog-editor"
@layout ConfiguratorLayout

<PageTitle>McMaster Style Catalog Editor</PageTitle>

<MudTabs Position="Position.Left" Class="mud-height-full overflow-auto" PanelClass="overflow-auto flex-column pa-3 gap-3 mud-background-gray" Border>

    <MudTabPanel Text="Categories">
        <MudContainer MaxWidth="MaxWidth.Medium">
            @if (_selectedProductCategory == null)
            {
                <MudPaper Class="d-flex flex-column gap-3 pa-3">
                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h6">Select A Category</MudText>
                        <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="() => AddProductCategory_OnClick(null)">Add Category</MudButton>
                    </MudStack>
                    <MudPaper Outlined MinHeight="300px" MaxHeight="600px" Class="d-flex flex-column overflow-auto">
                        @if (_productCategories.Any())
                        {
                            <MudList Clickable>
                                @foreach (var category in _productCategories)
                                {
                                    <MudListItem Text="@category.Name" OnClick="() => _selectedProductCategory = category" />
                                }
                            </MudList>
                        }
                        else
                        {
                            <div class="flex-grow-1 d-flex flex-column justify-center align-center">
                                <MudText>Click <strong>Add Category</strong> to add a new category</MudText>
                            </div>
                        }
                    </MudPaper>
                </MudPaper>

            }
            else
            {
                <MudPaper Class="d-flex flex-column gap-3 pa-3">
                    <div>
                        <MudButton StartIcon="@Icons.Material.Filled.ArrowBack" OnClick="() => _selectedProductCategory = _selectedProductCategory.ParentCategory">Back</MudButton>
                    </div>

                    <!-- category details -->
                    <MudText Typo="Typo.h6">Edit Product Category</MudText>
                    <MudStack Row>
                        @if (_selectedProductCategory.ThumbnailImage == null)
                        {
                            <div class="relative">
                                <MudFileUpload T="IBrowserFile" FilesChanged="UploadThumbnailImage" Hidden="false" Class="flex-1"
                                       InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20 cursor-pointer" InputStyle="opacity:0"
                                       @ondragenter="@SetDragStyle" @ondragleave="@ClearDragStyle" @ondrop="@ClearDragStyle">
                                    <ButtonTemplate>
                                        <MudPaper Height="150px" Width="150px" Class="d-flex flex-column justify-center align-center gap-1" Style="@($"border-color: var(--mud-palette-lines-inputs); {_dragStyle}")" Outlined>
                                            <MudIcon Icon="@Icons.Material.Filled.AddAPhoto" Size="Size.Large" />
                                            <MudText Typo="Typo.caption" Align="Align.Center">Click or Drop to add thumbnail</MudText>
                                        </MudPaper>
                                    </ButtonTemplate>
                                </MudFileUpload>
                            </div>
                        }
                        else
                        {
                            <MudPaper Height="150px" Width="150px" Outlined Class="d-flex align-center justify-center">
                                <MudImage Src="/images/no-image.png" Alt="thumbnail image" Height="150" Width="150" />
                            </MudPaper>
                        }
                        <MudStack Class="flex-grow-1">
                            <MudTextField T="string" @bind-Value="_selectedProductCategory.Name" Label="Name" Variant="Variant.Outlined" />
                            <MudTextField T="string" @bind-Value="_selectedProductCategory.Description" Label="Description" Variant="Variant.Outlined" Lines="4" />
                        </MudStack>
                    </MudStack>
                    <MudToolBar>
                        <MudButton Variant="Variant.Outlined">Delete Category</MudButton>
                        <MudSpacer />
                        <MudButton Variant="Variant.Outlined">Move Category</MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary">Save Changes</MudButton>
                    </MudToolBar>

                    <!-- child categories -->
                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mt-10">
                        <MudText Typo="Typo.h6">Child Categories</MudText>
                        <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="() => AddProductCategory_OnClick(_selectedProductCategory)">Add Category</MudButton>
                    </MudStack>
                    <MudPaper Outlined MinHeight="300px" MaxHeight="600px" Class="d-flex flex-column overflow-auto">
                        @if (_selectedProductCategory.ChildCategories.Any())
                        {
                            <MudList Clickable>
                                @foreach (var category in _selectedProductCategory.ChildCategories)
                                {
                                    <MudListItem Text="@category.Name" OnClick="() => _selectedProductCategory = category" />
                                }
                            </MudList>
                        }
                        else
                        {
                            <div class="flex-grow-1 d-flex flex-column justify-center align-center">
                                <MudText>Click <strong>Add Category</strong> to add a new category</MudText>
                            </div>
                        }
                    </MudPaper>
                </MudPaper>
            }
        </MudContainer>
    </MudTabPanel>

    <MudTabPanel Text="Products">
        <MudContainer MaxWidth="MaxWidth.Medium" Class="d-flex flex-column gap-3">
            @if (_selectedProductDefinition != null)
            {
                <MudPaper Class="pa-3 d-flex flex-column gap-3">
                    <div>
                        <MudButton StartIcon="@Icons.Material.Filled.ArrowBack" OnClick="() => _selectedProductDefinition = null">Back</MudButton>
                    </div>

                    <!-- product details -->
                    <MudText Typo="Typo.h6">Edit Product Details</MudText>
                    <MudStack Row>
                        @if (_selectedProductDefinition.ThumbnailImage == null)
                        {
                            <div class="relative">
                                <MudFileUpload T="IBrowserFile" FilesChanged="UploadThumbnailImage" Hidden="false" Class="flex-1"
                                       InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20 cursor-pointer" InputStyle="opacity:0"
                                       @ondragenter="@SetDragStyle" @ondragleave="@ClearDragStyle" @ondrop="@ClearDragStyle">
                                    <ButtonTemplate>
                                        <MudPaper Height="150px" Width="150px" Class="d-flex flex-column justify-center align-center gap-1" Style="@($"border-color: var(--mud-palette-lines-inputs); {_dragStyle}")" Outlined>
                                            <MudIcon Icon="@Icons.Material.Filled.AddAPhoto" Size="Size.Large" />
                                            <MudText Typo="Typo.caption" Align="Align.Center">Click or Drop to add thumbnail</MudText>
                                        </MudPaper>
                                    </ButtonTemplate>
                                </MudFileUpload>
                            </div>
                        }
                        else
                        {
                            <MudPaper Height="150px" Width="150px" Outlined Class="d-flex align-center justify-center">
                                <MudImage Src="/images/no-image.png" Alt="thumbnail image" Height="150" Width="150" />
                            </MudPaper>
                        }
                        <MudStack Class="flex-grow-1">
                            <MudTextField T="string" @bind-Value="_productDefinition.Name" Label="Name" Variant="Variant.Outlined" />
                            <MudTextField T="string" @bind-Value="_productDefinition.Description" Label="Description" Variant="Variant.Outlined" Lines="3"/>
                        </MudStack>
                    </MudStack>
                    <MudToolBar>
                        <MudButton Variant="Variant.Outlined">Delete Product</MudButton>
                        <MudSpacer />
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary">Save Changes</MudButton>
                    </MudToolBar>
                </MudPaper>

                <!-- columns definitions -->
                <MudPaper Class="pa-3 d-flex flex-column gap-3">
                    <MudText Typo="Typo.h6">Columns</MudText>
                    <MudCheckBox T="bool">Is Filterable</MudCheckBox>
                    <MudCheckBox T="bool">Is Visible</MudCheckBox>
                    <MudTextField @bind-Value="_newColumnHeader" Label="Name" Immediate Variant="Variant.Outlined" />
                    <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="AddColumnDefinition_OnClick" Disabled="string.IsNullOrWhiteSpace(_newColumnHeader)">Add Column</MudButton>
                    <MudList Class="flex-grow-1">
                        @foreach (var columnDef in _selectedProductDefinition.ColumnDefinitions)
                        {
                            <MudStack Row>
                                <MudTextField Value="columnDef.Header" Variant="Variant.Outlined" />
                                <MudSelect T="int" Variant="Variant.Outlined">
                                    <MudSelectItem Value="1">Text</MudSelectItem>
                                    <MudSelectItem Value="2">Decimal</MudSelectItem>
                                    <MudSelectItem Value="3">Integer</MudSelectItem>
                                    <MudSelectItem Value="4">True/False</MudSelectItem>
                                </MudSelect>
                                <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward" />
                                <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward" />
                            </MudStack>
                        }
                    </MudList>
                </MudPaper>

                <!-- product table -->
                <MudPaper Class="pa-3 d-flex flex-column gap-3">
                    <!-- product table -->
                    <MudTable T="Product" Items="_products"
                          OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))"
                          RowEditPreview="(product) => BackupItem((Product)product)"
                          RowEditCancel="(product) => ResetItemToOriginalValues((Product)product)"
                          RowEditCommit="(product) => UpdateProduct_OnClick((Product)product)"
                          IsEditRowSwitchingBlocked="false" ApplyButtonPosition="TableApplyButtonPosition.End" CanCancelEdit EditTrigger="TableEditTrigger.RowClick"
                          FixedHeader HorizontalScrollbar Height="100%" Class="flex-grow-1 flex-shrink-1 overflow-auto">
                        <NoRecordsContent>
                            @if (_productDefinition.ColumnDefinitions.Any())
                            {
                                <MudText>No Records</MudText>
                                <MudText>Click <strong>New Record</strong> to get started.</MudText>
                            }
                            else
                            {
                                <MudText>No Columns</MudText>
                                <MudText>Click <strong>Add Column</strong> to get started.</MudText>
                            }
                        </NoRecordsContent>
                        <HeaderContent>
                            <MudTh Style="min-width:15ch;">Part Number</MudTh>
                            @foreach (var columnDefinition in _productDefinition.ColumnDefinitions)
                            {
                                <MudTh Style="min-width:15ch;"><MudTableSortLabel SortBy="new Func<Product, object>(x=>x.ColumnValues.First(i=>i.ColumnDefinitionId == columnDefinition.Id).Value)">@columnDefinition.Header</MudTableSortLabel></MudTh>
                            }
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Part Number">123</MudTd>
                            @foreach (var columnDefinition in _productDefinition.ColumnDefinitions)
                            {
                                <MudTd DataLabel="@columnDefinition.Header">@context.ColumnValues.FirstOrDefault(i => i.ColumnDefinitionId == columnDefinition.Id)?.Value</MudTd>
                            }
                        </RowTemplate>
                        <RowEditingTemplate>
                            <MudTd DataLabel="Part Number">
                                <MudTextField T="string" Required />
                            </MudTd>
                            @foreach (var columnDefinition in _productDefinition.ColumnDefinitions)
                            {
                                <MudTd DataLabel="@columnDefinition.Header">
                                    <MudTextField @bind-Value="@context.ColumnValues.First(i => i.ColumnDefinitionId == columnDefinition.Id).Value" Required />
                                </MudTd>
                            }
                        </RowEditingTemplate>
                    </MudTable>

                    <!-- new row form -->
                    <MudPaper Class="pa-3 relative">
                        <MudStack Row>
                            <MudText Typo="Typo.h6">Add Product</MudText>
                            <MudSpacer />
                            <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="AddProduct_OnClick" Variant="Variant.Text">Add Product</MudButton>
                            <MudButton StartIcon="@Icons.Material.Filled.Clear" Size="Size.Small" OnClick="ResetNewProduct_OnClick" Variant="Variant.Text">Reset</MudButton>
                            @*<MudIconButton Icon="@Icons.Material.Filled.Check" Size="Size.Small" OnClick="AddProduct_OnClick" Variant="Variant.Text" />*@
                            @*<MudIconButton Icon="@Icons.Material.Filled.Close" Size="Size.Small" OnClick="ResetNewProduct_OnClick" Variant="Variant.Text" />*@
                        </MudStack>
                        <MudStack Row Class="overflow-auto">
                            @foreach (var columnDefinition in _productDefinition.ColumnDefinitions)
                            {
                                <MudTextField @bind-Value="_newProduct.ColumnValues.First(i => i.ColumnDefinitionId == columnDefinition.Id).Value" Label="@columnDefinition.Header" Required Class="py-5" Style="min-width:15ch;" />
                            }
                        </MudStack>
                        <MudOverlay Visible="!_productDefinition.ColumnDefinitions.Any()" Absolute DarkBackground />
                    </MudPaper>

                    <!-- events -->
                    <MudPaper Height="350px" Class="d-flex flex-column pa-3 mud-background-gray flex-shrink-0">
                        <MudText Typo="Typo.h6">Events</MudText>
                        <MudStack Class="flex-grow-1 overflow-auto">
                            @foreach (var message in _events)
                            {
                                <MudText Typo="@Typo.body2">@message</MudText>
                            }
                        </MudStack>
                        @if (_events.Count > 0)
                        {
                            <div class="d-flex">
                                <MudSpacer />
                                <MudButton Variant="Variant.Filled" OnClick="() => _events.Clear()">Clear</MudButton>
                            </div>
                        }
                    </MudPaper>

                    @*                    <MudDataGrid T="ProductRecord" Items="_productRecords"
                ReadOnly="false" EditMode="DataGridEditMode.Cell" EditTrigger="DataGridEditTrigger.OnRowClick"
                Class="mud-height-full" Dense>
                <NoRecordsContent>
                <MudText>No Records</MudText>
                <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="NewColumnDefinition_OnClick">Add Record</MudButton>
                </NoRecordsContent>
                <ToolBarContent>
                <MudText Typo="Typo.h6">Product Records</MudText>
                <MudSpacer />
                <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="NewColumnDefinition_OnClick">Add Column</MudButton>
                </ToolBarContent>
                <Columns>
                @foreach (var columnDefinition in _productDefinition.ColumnDefinitions)
                {
                <PropertyColumn Property="x => x.ColumnValues.First(i => i.ColumnDefinitionId == columnDefinition.Id).Value"
                SortBy="new Func<ProductRecord, object>(x=>x.ColumnValues.First(i=>i.ColumnDefinitionId == columnDefinition.Id).Value)">
                <EditTemplate>

                </EditTemplate>
                </PropertyColumn>
                }
                </Columns>
                <PagerContent>
                <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="NewProductRecord_OnClick" Variant="Variant.Outlined">Add Record</MudButton>
                </PagerContent>
                </MudDataGrid>

                *@
                </MudPaper>

                <!-- attachments -->
                <MudPaper Class="pa-3 d-flex flex-column gap-3">
                    <MudText Typo="Typo.h5">Upload Attachments</MudText>
                    <MudText Typo="Typo.body1">Drag and drop files to upload attachments. Files will be linked to products with matching part numbers.</MudText>
                    <MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".stp, .ipt" MaximumFileCount="999"
                               InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0;"
                               @ondragenter="@SetDragStyle" @ondragleave="@ClearDragStyle" @ondrop="@ClearDragStyle">
                        <ButtonTemplate>
                            <MudPaper Height="400px" Outlined Class="overflow-auto" Style="@($"border-color: var(--mud-palette-lines-inputs); {_dragStyle}")">
                                <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class="mud-height-full">
                                    <MudIcon Icon="@Icons.Material.Filled.UploadFile" Size="Size.Large" Color="Color.Default" />
                                    <MudText Typo="Typo.body1">Drop files or click</MudText>
                                </MudStack>
                            </MudPaper>
                        </ButtonTemplate>
                    </MudFileUpload>
                </MudPaper>

                <!-- security -->
                <MudPaper Class="pa-3 d-flex flex-column gap-3">
                    <MudText Typo="Typo.h5">Security</MudText>
                    <MudCheckBox T="bool">Allow attachment downloads.</MudCheckBox>
                    <MudCheckBox T="bool">Require email address.</MudCheckBox>
                </MudPaper>

            }
            else
            {
                <MudPaper Class="d-flex flex-column gap-3 pa-3">
                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h6">Select A Product</MudText>
                        <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="AddProductDefinition_OnClick">Add Product</MudButton>
                    </MudStack>
                    <MudPaper Outlined MinHeight="300px" MaxHeight="600px" Class="d-flex flex-column overflow-auto">
                        @if (_productDefinitions.Any())
                        {
                            <MudList Clickable>
                                @foreach (var productDefinition in _productDefinitions)
                                {
                                    <MudListItem Text="@productDefinition.Name" OnClick="() => _selectedProductDefinition = productDefinition" />
                                }
                            </MudList>
                        }
                        else
                        {
                            <div class="flex-grow-1 d-flex flex-column justify-center align-center">
                                <MudText>Click <strong>Add Product</strong> to add a new product</MudText>
                            </div>
                        }
                    </MudPaper>
                </MudPaper>
            }
        </MudContainer>
    </MudTabPanel>

    <MudTabPanel Text="Subscription">
        <MudContainer MaxWidth="MaxWidth.Medium">
        </MudContainer>
    </MudTabPanel>

    <MudTabPanel Text="Billing">
        <MudContainer MaxWidth="MaxWidth.Medium">
        </MudContainer>
    </MudTabPanel>

    <MudTabPanel Text="Account">
        <MudContainer MaxWidth="MaxWidth.Medium">
        </MudContainer>
    </MudTabPanel>

    <MudTabPanel Text="Settings">
        <MudContainer MaxWidth="MaxWidth.Medium">
        </MudContainer>
    </MudTabPanel>

    <MudTabPanel Text="Notifications">
        <MudContainer MaxWidth="MaxWidth.Medium">
        </MudContainer>
    </MudTabPanel>

</MudTabs>


