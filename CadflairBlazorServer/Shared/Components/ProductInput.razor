@using System.ComponentModel.DataAnnotations

@switch (Element.UiElementSpec)
{
    case "ControlTabContainerSpec":
        <MudTabs ApplyEffectsToContainer="true" Outlined="true" Rounded="true" PanelClass="pa-3">
            @foreach(ILogicFormElement tabPanel in Element.Items)
            {
                <MudTabPanel Text="@tabPanel.Name" ToolTip="@tabPanel.ToolTip">
                    <MudStack>
                        @foreach (ILogicFormElement element in tabPanel.Items)
                        {
                            <ProductInput Element="@element" @key="element"></ProductInput>
                        }
                    </MudStack>
                </MudTabPanel>
            }
        </MudTabs>
        break;


    case "ControlGroupSpec":
        <MudExpansionPanels>
            <MudExpansionPanel IsInitiallyExpanded="true">
                <TitleContent>
                    <MudText Typo="Typo.button"><b>@Element.Name</b></MudText>
                </TitleContent>
                <ChildContent>
                    <MudStack>
                        @foreach (ILogicFormElement element in Element.Items)
                        {
                            <ProductInput Element="@element" @key="element"></ProductInput>
                        }
                    </MudStack>
                </ChildContent>
            </MudExpansionPanel>
        </MudExpansionPanels>
        break;

    case "ControlRowSpec":
        <MudStack Row="true" AlignItems="AlignItems.Center">
            @foreach (ILogicFormElement element in Element.Items)
            {
                <ProductInput Element="@element" @key="element"></ProductInput>
            }
        </MudStack>
        break;

    case "NumericParameterControlSpec":
        switch (Element.EditControlType)
        {
            case "TextBox":
                <MudTooltip Text="@Element.ToolTip" RootStyle="width:100%">
                    <MudNumericField T="double?"
                                     Value="string.IsNullOrEmpty(Element.ParameterExpression) ? null : Double.Parse(Element.ParameterExpression.Replace(Element.ParameterUnits, string.Empty))"
                                     ValueChanged="@((val) => Element.ParameterExpression = $"{val.ToString()} {Element.ParameterUnits}")"
                                     Label="@Element.Name"
                                     HideSpinButtons="true"
                                     Adornment="Adornment.End"
                                     AdornmentText="@Element.ParameterUnits"
                                     Variant="@_variant"
                                     Validation="@(new RangeAttribute(minimum: Element.ParameterMinValue == null ? 0 : (double)Element.ParameterMinValue,
                                                                      maximum: Element.ParameterMaxValue == null ? 0 : (double)Element.ParameterMaxValue)
                                                                      { ErrorMessage = $"Please enter a value between {Element.ParameterMinValue} and {Element.ParameterMaxValue}." })" />
                </MudTooltip>
                break;

            case "TrackBar":
                <MudTooltip Text="@Element.ToolTip" RootStyle="width:100%">
                    <MudSlider T="double?"
                               Value="string.IsNullOrEmpty(Element.ParameterExpression) ? null : Double.Parse(Element.ParameterExpression.Replace(Element.ParameterUnits, string.Empty))"
                               ValueChanged="@((val) => Element.ParameterExpression = $"{val.ToString()} {Element.ParameterUnits}")"
                               Min="@(Element.TrackBarMinValue == null ? default(double) : (double)Element.TrackBarMinValue)"
                               Max="@(Element.TrackBarMaxValue == null ? default(double) : (double)Element.TrackBarMaxValue)"
                               Step="@(Element.TrackBarIncrement == null ? default(double) : (double)Element.TrackBarIncrement)"
                               TickMarks="true"
                               Variant="@_variant"
                               ValueLabel="true">
                        @Element.Name: 
                        @if(Element.ParameterUnits == "ul")
                        {
                            @Element.ParameterExpression.Replace("ul", string.Empty)
                        }
                        else
                        {
                            @Element.ParameterExpression
                        }
                    </MudSlider>
                </MudTooltip>
                break;

        }
        break;

    case "TextParameterControlSpec":
        <MudTooltip Text="@Element.ToolTip" RootStyle="width:100%">
            <MudTextField Label="@Element.Name" 
                          @bind-Value="@Element.ParameterExpression"
                          Variant="@_variant"/>
        </MudTooltip>
        break;

    case "MultiValueNumericParameterControlSpec":
    case "MultiValueTextParameterControlSpec":
        switch (Element.EditControlType)
        {
            case "RadioGroup":
                <MudTooltip Text="@Element.ToolTip" RootStyle="width:100%">
                    <MudText>@Element.Name</MudText>
                    <MudRadioGroup T="string" @bind-SelectedOption="Element.ParameterExpression">
                        @foreach (string expression in Element.ParameterExpressionList)
                        {
                            <MudRadio Option="expression" Color="Color.Primary">
                                @if(Element.ParameterUnits == "ul")
                                {
                                    @expression.Replace(Element.ParameterUnits, string.Empty)
                                }
                                else
                                {
                                    @expression
                                }
                            </MudRadio>
                        }
                    </MudRadioGroup>
                </MudTooltip>
                break;

            case "ComboBox":
                <MudTooltip Text="@Element.ToolTip" RootStyle="width:100%">
                    <MudSelect T="string" 
                               @bind-Value="Element.ParameterExpression" 
                               Label="@Element.Name" 
                               Variant="@_variant" 
                               AnchorOrigin="Origin.BottomCenter">
                        @foreach (string expression in Element.ParameterExpressionList)
                        {
                            <MudSelectItem Value="expression">
                                @if(Element.ParameterUnits == "ul")
                                {
                                    @expression.Replace(Element.ParameterUnits, string.Empty)
                                }
                                else
                                {
                                    @expression
                                }
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudTooltip>
                break;

            case "ListBox":
                <MudTooltip Text="@Element.ToolTip" RootStyle="width:100%">
                    <MudList Clickable="true" 
                             SelectedValue="Element.ParameterExpression"
                             SelectedValueChanged="@((val) => Element.ParameterExpression = (string)val)"
                             Class="mud-paper-outlined mud-tabs-rounded pa-0"
                             Style="border-radius: var(--mud-default-borderradius);"
                             Dense="true">
                        <MudListSubheader DisableGutters="true" Class="pa-3">
                            <MudText><b>@Element.Name</b></MudText>
                        </MudListSubheader>
                        @foreach (string expression in Element.ParameterExpressionList)
                        {
                            <MudDivider />
                            <MudListItem Value="@expression">
                                @if (Element.ParameterUnits == "ul")
                                {
                                    @expression.Replace(Element.ParameterUnits, string.Empty)
                                }
                                else
                                {
                                    @expression
                                }
                            </MudListItem>
                        }
                    </MudList>
                </MudTooltip>
                break;
        }
        break;

    case "BooleanParameterControlSpec":
        switch (Element.EditControlType)
        {
            case "CheckBox":
                <MudTooltip Text="@Element.ToolTip" RootStyle="width:100%">
                    <MudCheckBox T="bool" 
                                 Checked="Convert.ToBoolean(Element.ParameterExpression)"
                                 CheckedChanged="@((val) => Element.ParameterExpression = val.ToString())"
                                 Label="@Element.Name" 
                                 LabelPosition="LabelPosition.End" />
                </MudTooltip>
                break;

            case "TrueOrFalse":
                <MudTooltip Text="@Element.ToolTip" RootStyle="width:100%">
                    <MudSelect T="string" 
                               @bind-Value="Element.ParameterExpression" 
                               Variant="@_variant"
                               Label="@Element.Name">
                        <MudSelectItem Value="@("True")" />
                        <MudSelectItem Value="@("False")" />
                    </MudSelect>
                </MudTooltip>
                break;
        }
        break;

    case "LabelSpec":
        <MudText>@Element.Name</MudText>
        break;

    case "SplitterSpec":
        break;

    case "PictureControlSpec":
        break;

    case "TextPropertyControlSpec": //this is an iProperty
    case "iLogicRuleControlSpec": //this is an iLogic Rule
    default:
        break;

}

@code {

    [Parameter] public ILogicFormElement Element { get; set; } = new();

    private Variant _variant = Variant.Outlined;

}
