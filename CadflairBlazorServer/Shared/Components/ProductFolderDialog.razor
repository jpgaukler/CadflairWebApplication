@attribute [Authorize]
@inject DataServicesManager _dataServicesManager
@inject ISnackbar _snackbar

<MudDialog>
    <DialogContent>
        <MudTextField Label="Folder Name" @bind-Value="_newProductFolderName" Variant="Variant.Filled" Immediate="true"/>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel_OnClick">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Ok_OnClick" Disabled="@(string.IsNullOrWhiteSpace(_newProductFolderName))">Ok</MudButton>
    </DialogActions>
</MudDialog>


@code {

    [CascadingParameter] public MudDialogInstance? MudDialog { get; set; }
    [Parameter] public int UserId { get; set; }
    [Parameter] public int SubscriptionId { get; set; }
    [Parameter] public int? ParentId { get; set; }

    private string _newProductFolderName = string.Empty;

    private async Task Ok_OnClick()
    {
        List<ProductFolder> existingFolders = await _dataServicesManager.ProductService.GetProductFoldersBySubscriptionIdAndParentId(SubscriptionId, ParentId);
        if (existingFolders.Exists(i => i.DisplayName.Equals(_newProductFolderName, StringComparison.CurrentCultureIgnoreCase)))
        {
            _snackbar.Add("A folder with this name already exists.", Severity.Warning);
            return;
        }

        ProductFolder productFolder = await _dataServicesManager.ProductService.CreateProductFolder(subscriptionId: SubscriptionId,
                                                                                                    createdById: UserId,
                                                                                                    displayName: _newProductFolderName,
                                                                                                    parentId: ParentId);

        _snackbar.Add("New folder created.", Severity.Success);
        MudDialog?.Close(DialogResult.Ok(true));
    }

    private void Cancel_OnClick() => MudDialog?.Cancel();

}
