@attribute [Authorize]
@inject AuthenticationStateProvider _authenticationStateProvider
@inject DataServicesManager _dataServicesManager


<MudPaper Class="pa-3">
    <MudText Typo="Typo.h6">Manage Product Families</MudText>
    
    <MudStack Row="true">
        <MudPaper Elevation="0">
            <MudTreeView Items="_productFolderTreeItems"
                         ServerData="LoadProductFolderTreeItems"
                         @bind-SelectedValue="_selectedProductFolderTreeItem"
                         Hover="true"
                         ExpandOnDoubleClick="true">
                <ItemTemplate>
                    <MudTreeViewItem Value="@context"
                                     Items="@context.ChildItems"
                                     Text="@context.ProductFolder.DisplayName"
                                     Icon="@Icons.Custom.Uncategorized.Folder" />
                </ItemTemplate>
            </MudTreeView>
        </MudPaper>

        <MudStack>
            <MudText Typo="Typo.h4">Create Product Family</MudText>
            <MudText Typo="Typo.h4"><b>Parent Family: </b>@_selectedProductFolderTreeItem?.ProductFolder.DisplayName</MudText>
            <MudTextField Label="Display Name" @bind-Value="_newProductFolderName" Variant="Variant.Filled" Required="true" RequiredError="Please enter a display name." />
            <MudButton OnClick="CreateProductFolder_OnClick" Variant="Variant.Filled" Color="Color.Primary">Create Product Family</MudButton>
        </MudStack>
    </MudStack>
</MudPaper>



@code {

    private User _loggedInUser = new();

    private class ProductFolderTreeItem
    {
        public ProductFolder ProductFolder { get; set; } = new();
        public HashSet<ProductFolderTreeItem> ChildItems { get; set; } = new();
    }

    private HashSet<ProductFolderTreeItem> _productFolderTreeItems { get; set; } = new();
    private string _newProductFolderName = string.Empty;
    private ProductFolderTreeItem? _selectedProductFolderTreeItem; 


    protected override async Task OnInitializedAsync()
    {
        _loggedInUser = await _authenticationStateProvider.GetUser(_dataServicesManager.UserService);
        if (_loggedInUser.SubscriptionId == null) return;

        List<ProductFolder> productFamilies = await _dataServicesManager.ProductService.GetProductFoldersBySubscriptionIdAndParentId((int)_loggedInUser.SubscriptionId!, null);

        foreach (ProductFolder family in productFamilies)
        {
            _productFolderTreeItems.Add(new ProductFolderTreeItem() { ProductFolder = family });
        }
    }

    private async Task CreateProductFolder_OnClick()
    {
        if (string.IsNullOrWhiteSpace(_newProductFolderName)) return;

        ProductFolder productFolder = await _dataServicesManager.ProductService.CreateProductFolder(subscriptionId: (int)_loggedInUser.SubscriptionId!,
                                                                                                    parentId: _selectedProductFolderTreeItem == null ? null :  _selectedProductFolderTreeItem.ProductFolder.Id,
                                                                                                    displayName: _newProductFolderName,
                                                                                                    createdById: _loggedInUser.Id);

    }

    private async Task<HashSet<ProductFolderTreeItem>> LoadProductFolderTreeItems(ProductFolderTreeItem parentItem)
    {
        List<ProductFolder> productFamilies = await _dataServicesManager.ProductService.GetProductFoldersBySubscriptionIdAndParentId((int)_loggedInUser.SubscriptionId!, parentItem.ProductFolder.Id);

        foreach (ProductFolder family in productFamilies)
        {
            parentItem.ChildItems.Add(new ProductFolderTreeItem() { ProductFolder = family });
        }

        return parentItem.ChildItems;
    }


}
