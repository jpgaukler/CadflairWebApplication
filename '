using CadflairDataAccess.Models;
using Inventor;
using Newtonsoft.Json;
using System.Collections.Generic;

namespace CadflairInventorAddin.Utilities
{
    internal static class ExtensionMethods
    {
        /// <summary>
        /// Get the associated drawing view object for the given dimension.
        /// </summary>
        /// <param name="dim"></param>RemoveWhiteSpace
        /// <returns></returns>
        public static DrawingView GetView(this DrawingDimension dim)
        {
            if (dim is LinearGeneralDimension)
            {
                LinearGeneralDimension linearDim = (LinearGeneralDimension)dim;
                dynamic geom = (dynamic)linearDim.IntentOne.Geometry;
                return geom.Parent;
            }
            else if (dim is DiameterGeneralDimension)
            {
                DiameterGeneralDimension diameterDim = (DiameterGeneralDimension)dim;
                dynamic geom = (dynamic)diameterDim.Intent.Geometry;
                return geom.Parent;
            }
            else if (dim is RadiusGeneralDimension)
            {
                RadiusGeneralDimension radiusDim = (RadiusGeneralDimension)dim;
                dynamic geom = (dynamic)radiusDim.Intent.Geometry;
                return geom.Parent;
            }
            else if (dim is OrdinateDimension)
            {
                OrdinateDimension ordDim = (OrdinateDimension)dim;
                dynamic geom = (dynamic)ordDim.Intent.Geometry;
                return geom.Parent;
            }
            else if (dim is AngularGeneralDimension)
            {
                AngularGeneralDimension angularDim = (AngularGeneralDimension)dim;
                dynamic geom = (dynamic)angularDim.IntentOne.Geometry;
                return geom.Parent;
            }
            else
            {
                return null;
            }
        }

        public static Inventor.Property GetProperty(this Document doc, string propertyName)
        {
            foreach(PropertySet propSet in doc.PropertySets)
            {
                foreach(Property prop in propSet)
                {
                    if (prop.Name == propertyName) return prop;
                }
            }

            return null;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="doc"></param>
        /// <param name="parameterName"></param>
        /// <returns>The matching parameter, or <b>null</b> if no match is found.</returns>
        public static Inventor.Parameter GetParameter(this Document doc, string parameterName)
        {
            if (string.IsNullOrWhiteSpace(parameterName)) return null;

            try
            {
                if (doc is PartDocument)
                {
                    PartDocument partDoc = (PartDocument)doc;
                    return partDoc.ComponentDefinition.Parameters[parameterName];
                }

                if (doc is AssemblyDocument)
                {
                    AssemblyDocument assemDoc = (AssemblyDocument)doc;
                    return assemDoc.ComponentDefinition.Parameters[parameterName];
                }
            }
            catch { }

            return null;
        }

        public static string[] ToStringArray(this ExpressionList expressionList)
        {
            if (expressionList == null || expressionList.Count == 0) return null;

            List<string> stringList = new List<string>();

            for (int i = 1; i <= expressionList.Count; i++)
            {
                stringList.Add(expressionList[i].Replace("\"", ""));
            }

            return stringList.ToArray();
        }

        /// <summary>
        /// Convert the given ILogicUiElemnent model to a json string. Null values will be excluded from the result.
        /// </summary>
        /// <param name="formSpecElement"></param>
        /// <returns>A json string representing the ILogicUiElement</returns>
        private static string ToJson(this ILogicUiElement formSpecElement)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings()
            {
                NullValueHandling = NullValueHandling.Ignore,
                DefaultValueHandling = DefaultValueHandling.Ignore //ignore empty strings and arrays
            };

            return JsonConvert.SerializeObject(formSpecElement, settings); ;
        }
    }

}
