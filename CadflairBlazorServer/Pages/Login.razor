@page "/login"
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authStateProvider
@inject UserService _userService
@inject IJSRuntime _js

<h3>Login</h3>

<EditForm Model="@_model" OnValidSubmit="@Authenticate">
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Email" @bind-Value="_model.EmailAddress"
                          For="@(() => _model.EmailAddress)" />
            <MudTextField Label="Password"
                          @bind-Value="_model.Password"
                          For="@(() => _model.Password)"
                          InputType="@_passwordInput"
                          Adornment="Adornment.End"
                          AdornmentIcon="@_passwordIcon"
                          OnAdornmentClick="TogglePassword"
                          AdornmentAriaLabel="Show Password" />
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Login</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    private User user = new();
    private LoginForm _model = new();
    private InputType _passwordInput = InputType.Password;
    private string _passwordIcon = Icons.Material.Filled.VisibilityOff;
    private bool _showPassword;

    private async Task Authenticate()
    {
        User user = await _userService.GetUserByEmailAddress(_model.EmailAddress);

        PasswordHasher<User> hasher = new();

        if (user == null || hasher.VerifyHashedPassword(user, user.PasswordHash, _model.Password) == PasswordVerificationResult.Failed)
        {
            await _js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }

        UserRole userRole = await _userService.GetUserRoleById(user.UserRoleId);

        UserSession userSession = new()
        {
            Name = user.FullName,
            EmailAddress = user.EmailAddress,
            Role = userRole.Name
        };

        await ((CadflairAuthenticationStateProvider)_authStateProvider).UpdateAuthenticationState(userSession);
        _navigationManager.NavigateTo("/", true);
    }

    private void TogglePassword()
    {
        if (_showPassword)
        {
            _passwordIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }

        _showPassword = !_showPassword;
    }

}
